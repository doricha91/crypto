doricha91/crypto 스크립트 상세 설명 및 주석
제공해주신 1. backtest.py와 2. collect_ohlcv.py 두 파이썬 스크립트의 동작 방식과 코드에 대한 상세한 설명을 준비했습니다.
코드를 처음 보는 초보자도 이해하기 쉽도록 각 코드 라인에 주석을 추가했습니다.

이 두 스크립트는 하나의 시스템처럼 동작합니다.

2. collect_ohlcv.py: 업비트(Upbit)에서 암호화폐의 과거 시세 데이터(OHLCV: 시가, 고가, 저가, 종가, 거래량)를 수집하여 로컬 데이터베이스 파일(upbit_ohlcv.db)에 저장하는 역할을 합니다.
1. backtest.py: collect_ohlcv.py가 저장한 데이터를 불러와, 다양한 거래 전략을 과거 데이터에 적용해보는 시뮬레이션(백테스팅)을 수행합니다. 이를 통해 어떤 전략과 파라미터가 과거에 좋은 성과를 냈는지 분석할 수 있습니다.


1. 2. collect_ohlcv.py (데이터 수집기)
이 스크립트의 핵심 목표는 안정적으로 과거 시세 데이터를 로컬 환경에 구축하는 것입니다.

주요 동작 방식
설정: 사용자는 수집하고 싶은 암호화폐 티커 목록(BLUE_CHIP_TICKERS)과 데이터 시간 단위(TARGET_INTERVALS, 예: 'day' 또는 'minute60')를 지정합니다.
DB 연결 및 확인: upbit_ohlcv.db 라는 SQLite 데이터베이스 파일에 연결합니다. 특정 티커와 시간 단위에 해당하는 테이블이 이미 있는지, 데이터가 있다면 마지막 데이터는 언제인지 확인합니다.
데이터 수집:
전체 수집: 만약 데이터가 전혀 없다면, 업비트 API가 허용하는 한 가장 오래된 과거 데이터부터 현재까지 모든 데이터를 가져옵니다 (get_all_ohlcv 함수).
증분 업데이트: 만약 기존 데이터가 있다면, 가장 최신 데이터만 가져와서 기존 테이블에 추가합니다. 이렇게 하면 매번 모든 데이터를 받을 필요 없이 효율적으로 업데이트할 수 있습니다.
저장: 수집한 데이터를 Pandas DataFrame 형태로 가공하여 SQLite DB에 테이블로 저장합니다. 테이블 이름은 티커_시간단위 (예: KRW_BTC_day) 형식으로 만들어집니다.

2. 1. backtest.py (전략 백테스터)
이 스크립트는 저장된 과거 데이터를 이용해 트레이딩 전략의 성과를 시뮬레이션하는 복잡하고 강력한 도구입니다.

주요 동작 방식
모드 및 설정 선택: 사용자는 스크립트 상단의 설정 영역에서 백테스팅의 모든 조건을 제어합니다.

MODE:
'GRID_SEARCH': 하나의 암호화폐에 대해 여러 파라미터 조합(예: 다양한 RSI 기간, 손절매 기준 등)을 모두 테스트하여 최적의 조합을 찾습니다.
'MULTI_TICKER': 여러 암호화폐에 대해 미리 정해진 우수 전략(챔피언 전략)들을 각각 테스트하여 어떤 코인에서 어떤 전략이 잘 통하는지 비교합니다.
기본 설정: 초기 자본금, 수수료, 테스트할 시간 단위(일봉/시간봉) 등을 설정합니다.
데이터 로딩 및 가공:

collect_ohlcv.py가 만든 upbit_ohlcv.db에서 필요한 티커의 데이터를 불러옵니다.
실행할 전략에 필요한 모든 기술적 보조지표(이동평균선, RSI, 볼린저밴드 등)를 한 번에 계산하여 데이터에 추가합니다. pandas-ta 라이브러리를 사용해 이 과정을 효율적으로 처리합니다.
신호 생성:

strategy_로 시작하는 여러 함수(예: strategy_trend_following, strategy_rsi_mean_reversion)들이 각각의 트레이딩 전략 로직을 담고 있습니다.
각 전략은 데이터와 파라미터를 입력받아, 특정 조건이 충족되면 매수(1), 매도(-1), 또는 관망(0) 신호를 생성합니다.
백테스팅 시뮬레이션 (run_backtest 함수):

초기 자본금을 가지고 과거 데이터의 첫날부터 마지막 날까지 하루씩(또는 시간 단위씩) 이동하며 시뮬레이션을 진행합니다.
매수: 전략이 매수 신호(signal == 1)를 보내고 현재 보유한 자산이 없으면, 자본금의 일부로 코인을 매수합니다.
매도: 자산을 보유하고 있을 때, 아래와 같은 여러 매도 조건을 지속적으로 확인합니다.
전략 매도 신호: signal == -1일 때
부분 익절: 목표 수익률에 도달하면 일부를 매도합니다.
손절매 (Stop-loss): ATR 지표를 기반으로 특정 손실률에 도달하면 전량 매도합니다.
트레일링 스탑 (Trailing Stop): 고점 대비 특정 비율만큼 가격이 하락하면 전량 매도합니다.
기타 전략별 청산: 이동평균선 이탈, 터틀 트레이딩의 특정 청산 조건 등
모든 거래와 매일의 포트폴리오 가치(현금 + 보유 코인 평가액)를 기록합니다.
성과 분석 및 결과 출력:

시뮬레이션이 끝나면 기록된 데이터를 바탕으로 다양한 성과 지표를 계산합니다.
주요 지표: 총수익률(ROI), 최대 낙폭(MDD), 샤프 지수(위험 대비 수익성), 캘머 지수(MDD 대비 수익성), 승률, 수익 팩터 등
계산된 결과는 화면에 보기 좋게 출력되고, advanced_backtest_log.csv 파일에 누적 기록됩니다.

